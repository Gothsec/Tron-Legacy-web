---
interface NavItem {
  href: string;
  icon: string;
  ariaLabel: string;
}

const navItems: NavItem[] = [
  {
    href: "#home",
    ariaLabel: "Home",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M21 20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V9.48907C3 9.18048 3.14247 8.88917 3.38606 8.69972L11.3861 2.47749C11.7472 2.19663 12.2528 2.19663 12.6139 2.47749L20.6139 8.69972C20.8575 8.88917 21 9.18048 21 9.48907V20ZM19 19V9.97815L12 4.53371L5 9.97815V19H19Z"></path></svg>`,
  },
  {
    href: "#gallery",
    ariaLabel: "Gallery",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M3 3C2.44772 3 2 3.44772 2 4V10C2 10.5523 2.44772 11 3 11H10C10.5523 11 11 10.5523 11 10V4C11 3.44772 10.5523 3 10 3H3ZM4 9V5H9V9H4ZM3 13C2.44772 13 2 13.4477 2 14V20C2 20.5523 2.44772 21 3 21H10C10.5523 21 11 20.5523 11 20V14C11 13.4477 10.5523 13 10 13H3ZM4 19V15H9V19H4ZM13 4C13 3.44772 13.4477 3 14 3H21C21.5523 3 22 3.44772 22 4V10C22 10.5523 21.5523 11 21 11H14C13.4477 11 13 10.5523 13 10V4ZM15 5V9H20V5H15ZM14 13C13.4477 13 13 13.4477 13 14V20C13 20.5523 13.4477 21 14 21H21C21.5523 21 22 20.5523 22 20V14C22 13.4477 21.5523 13 21 13H14ZM15 19V15H20V19H15Z"></path></svg>`,
  },
  {
    href: "#music",
    ariaLabel: "Music",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M18.7134 8.12811L18.4668 8.69379C18.2864 9.10792 17.7136 9.10792 17.5331 8.69379L17.2866 8.12811C16.8471 7.11947 16.0555 6.31641 15.0677 5.87708L14.308 5.53922C13.8973 5.35653 13.8973 4.75881 14.308 4.57612L15.0252 4.25714C16.0384 3.80651 16.8442 2.97373 17.2761 1.93083L17.5293 1.31953C17.7058 0.893489 18.2942 0.893489 18.4706 1.31953L18.7238 1.93083C19.1558 2.97373 19.9616 3.80651 20.9748 4.25714L21.6919 4.57612C22.1027 4.75881 22.1027 5.35653 21.6919 5.53922L20.9323 5.87708C19.9445 6.31641 19.1529 7.11947 18.7134 8.12811ZM7 3H12V5H9V17C9 19.2091 7.20914 21 5 21C2.79086 21 1 19.2091 1 17C1 14.7909 2.79086 13 5 13C5.72857 13 6.41165 13.1948 7 13.5351V3ZM18 13.5351V11H20V17C20 19.2091 18.2091 21 16 21C13.7909 21 12 19.2091 12 17C12 14.7909 13.7909 13 16 13C16.7286 13 17.4117 13.1948 18 13.5351ZM5 19C6.10457 19 7 18.1046 7 17C7 15.8954 6.10457 15 5 15C3.89543 15 3 15.8954 3 17C3 18.1046 3.89543 19 5 19ZM16 19C17.1046 19 18 18.1046 18 17C18 15.8954 17.1046 15 16 15C14.8954 15 14 15.8954 14 17C14 18.1046 14.8954 19 16 19Z"></path></svg>`,
  },
  {
    href: "#footer",
    ariaLabel: "Footer",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor"><path d="M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20ZM11 7H13V9H11V7ZM11 11H13V17H11V11Z"></path></svg>`,
  },
];
---

<nav
  id="main-nav"
  class="fixed right-9 top-1/2 -translate-y-1/2 z-[100] border-2 border-[var(--prim)] rounded-2xl backdrop-blur-xl transition-all duration-300"
>
  <ul class="flex flex-col gap-18">
    {
      navItems.map((item) => (
        <li>
          <a
            href={item.href}
            aria-label={item.ariaLabel}
            class="flex items-center justify-center w-10 h-10 text-[var(--prim)] hover:text-white transition-colors duration-300"
          >
            <span class="flex items-center justify-center w-7 h-7">
              <fragment set:html={item.icon} />
            </span>
          </a>
        </li>
      ))
    }
  </ul>
</nav>

<style>
  nav {
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
    padding: 1.6rem 0.3rem;
  }

  nav.scrolling {
    background-color: var(--component-bg);
    border-color: #ffffff20;
  }

  nav a.active {
    color: white !important;
    transform: scale(1.15);
  }

  @media (max-width: 767px) {
    nav {
      width: 100% !important;
      height: auto !important;
      transform: none !important;
      bottom: 0;
      left: 0;
      right: 0;
      top: auto;
      position: fixed;
      border-radius: 1rem 1rem 0 0;
      padding: 0.75rem 1rem;
      z-index: 1000;
    }

    nav ul {
      flex-direction: row !important;
      justify-content: space-around;
      gap: 0.5rem !important;
      padding: 0;
      margin: 0;
    }

    nav li {
      flex: 1;
      text-align: center;
    }

    nav a {
      width: 100% !important;
      height: 3rem !important;
    }

    nav.scrolling {
      border-radius: 1rem 1rem 0 0;
      background-color: var(--component-bg);
      backdrop-filter: blur(10px);
    }
  }
</style>

<script lang="ts">
  const nav = document.getElementById("main-nav");
  let rafId = null;

  function updateNav() {
    if (window.scrollY > 0) {
      nav?.classList.add("scrolling");
    } else {
      nav?.classList.remove("scrolling");
    }
    rafId = null;
  }

  window.addEventListener(
    "scroll",
    () => {
      if (!rafId) {
        rafId = requestAnimationFrame(updateNav);
      }
    },
    { passive: true }
  );

  document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener("click", function (e) {
      e.preventDefault();
      const target = e.currentTarget;
      const targetId = target.getAttribute("href")?.substring(1) || "";
      const targetElement = document.getElementById(targetId);
      if (targetElement) {
        targetElement.scrollIntoView({
          behavior: "smooth",
        });
      }
    });
  });

  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll("section[id]");
    const navLinks = document.querySelectorAll("nav a[href^='#']");
    const observerOptions = { threshold: 0.6 };

    const observerCallback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navLinks.forEach((link) => link.classList.remove("active"));
          const id = entry.target.getAttribute("id");
          const activeLink = document.querySelector(`nav a[href="#${id}"]`);
          if (activeLink) {
            activeLink.classList.add("active");
          }
        }
      });
    };

    const observer = new IntersectionObserver(observerCallback, observerOptions);
    sections.forEach((section) => observer.observe(section));

    // Add this code to adjust padding at the bottom of the body for mobile view
    function adjustBodyPadding() {
      if (window.innerWidth <= 767) {
        const navHeight = nav?.offsetHeight || 0;
        document.body.style.paddingBottom = `${navHeight + 16}px`;
      } else {
        document.body.style.paddingBottom = '0';
      }
    }

    window.addEventListener('resize', adjustBodyPadding);
    adjustBodyPadding(); // Initial call
  });
</script>